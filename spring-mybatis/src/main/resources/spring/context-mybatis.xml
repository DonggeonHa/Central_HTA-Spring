<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd">


	<!--
		데이터베이스 연결정보가 포함된 Properties 파일 로딩하기
	-->
	<context:property-placeholder location="classpath:/spring/db.properties"/>

	<!--
		Apache commons-dbcp의 BasicDataSource를 커넥션풀 객체를 스프링 컨테이너에 등록하기
	-->
	<bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource"
		  p:driverClassName="${db.driverClassName}"
		  p:url="${db.url}"
		  p:username="${db.username}"
		  p:password="${db.password}"/>

	<!-- Spring과 mybatis 연동시키기 -->
	<!--
		1. mybatis의 핵심객체(SqlSessionFactory)를 스프링의 빈으로 등록하기
			* mybatis의 환경설정정보를 가지는 객체다.
			* 매핑된 SQL 구문정보를 가지는 객체다.
			* SqlSession을 제공하는 객체다.

	-->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"
		  p:dataSource-ref="dataSource"
		  p:configLocation="classpath:/mybatis/mybatis-config.xml"
		  p:mapperLocations="classpath:/mybatis/mappers/*.xml"/>

	<!--
		2. MapperScannerConfigure를 스프링의 빈으로 등록하기
			* Mapper 인터페이스에 대한 구현객체(Mapper 인스턴스)를 생성한다.
			* 생성된 Mapper 인스턴스를 스프링 컨테이너의 빈으로 등록한다.

			* 스프링 컨테이너에 등록된 Mapper 인스턴스는 의존성 주입을 통해 필요한 곳에 제공할 수 있다.
	-->
	<mybatis-spring:scan base-package="com.sample.mapper"
						 factory-ref="sqlSessionFactory" />

	<!--
		업무로직이 구현되어 있는 com.sample.service 패키지의 모든 클래스를 스캔해서 스프링의 빈으로 자동
		등록하고, 의존성 주입도 처리하기
	-->
	<context:component-scan base-package="com.sample.service" />

</beans>
